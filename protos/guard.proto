syntax = "proto3";

package guard;

import "./gogo.proto";
import "google/protobuf/timestamp.proto";

//the relationship of the objects from Guard's view
// FileStoreMeta (1:n) Contract (1:n) payout
//contract is the signed document between the renter and host for one shard's storage
// the contract information contains buyer, seller, escrow, guard , storage shard's information, rent duration, amount, payment method(periodically and times)
//ContractMeta is the information which will not be changed after proposal
//Contract technically is the contract execution record, it contains the contractMeta and state information
message ContractMeta {
  //Contract proposed by renter, will not be changed after renter proposed
  string contract_id = 1; //one id which generated by renter, and will be check unique by escrow service
  string renter_pid = 2; //renter's wallet peerId
  string host_pid = 3; //host’s wallet peerId
  string shard_hash = 4; //shard’s hash
  int32 shard_index = 5; //shard’s sequence of the original file
  int64 shard_file_size = 6; //shard’s file size
  string file_hash = 7; //original file's hash, reserved point32 back to FileStoreMeta
  google.protobuf.Timestamp rent_start = 8 [
                                           (gogoproto.nullable) = false,
                                           (gogoproto.stdtime) = true
                                           ]; //rent start time
  google.protobuf.Timestamp rent_end = 9 [
                                         (gogoproto.nullable) = false,
                                         (gogoproto.stdtime) = true
                                         ]; //rent end time
  string guard_pid = 10; //renter proposed guard's peerId
  string escrow_pid = 11; //renter proposed escrow's peerId
  int64 price = 12; //the price which agreed by host and rental, on the first phase, it equal to the proposed_price
  int64 amount = 13; //the amount which agreed by host and rental, on the first phase, it should be equal file_size*duration*agreed_price
  int64 collateral_amount = 14;
  enum Schedule {
    MONTHLY = 0;
    QUARTERLY = 1;
    ANNUALLY = 2;
  }
  Schedule payout_schedule = 15; // schedule for payouts
  int32 num_payouts = 16; // numbers of payouts
}
